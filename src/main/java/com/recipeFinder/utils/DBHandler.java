package com.recipeFinder.utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 * Handles database operations
 * Provides methods to connect to the database, execute SQL statements, and retrieve query results.
 */
public class DBHandler implements AutoCloseable {
    private Connection connection;

    /**
     * Connects to the database.
     *
     * @throws SQLException if a database access error occurs or the URL is null
     */
    public void connect() throws SQLException {
        connection = DriverManager.getConnection(Constants.SQLITE_URL);
    }

    /**
     * Disconnects from the database.
     *
     * @throws SQLException if a database access error occurs or the connection is already closed
     */
    public void disconnect() throws SQLException {
        if (connection != null) {
            connection.close();
        }
    }

    /**
     * Executes an update SQL statement.
     *
     * @param sql the SQL statement to be executed
     * @throws SQLException if a database access error occurs, the statement is closed, or the SQL statement syntax is invalid
     */
    public void executeUpdate(String sql) throws SQLException {
        Statement statement = null;
        try {
            statement = connection.createStatement();
            statement.executeUpdate(sql);
        } finally {
            if (statement != null) {
                statement.close();
            }
        }
    }

    /**
     * Executes a query SQL statement and returns the result set.
     *
     * @param sql the SQL statement to be executed
     * @return the result set generated by the query
     * @throws SQLException if a database access error occurs, the statement is closed, or the SQL statement syntax is invalid
     */
    public ResultSet executeQuery(String sql) throws SQLException {
        Statement statement = null;
        try {
            statement = connection.createStatement();
            return statement.executeQuery(sql);
        } catch (SQLException e) {
            if (statement != null) {
                statement.close();
            }
            throw e;
        }
    }

    public Connection getConnection() {
        return this.connection;
    }

    @Override
    public void close() {
        try {
            connection.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
